<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compilation on Wojtek Rzeplinski's website</title><link>https://wojtek-rz.github.io/tags/compilation/</link><description>Recent content in Compilation on Wojtek Rzeplinski's website</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 13 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://wojtek-rz.github.io/tags/compilation/index.xml" rel="self" type="application/rss+xml"/><item><title>Dive into your assembly code!</title><link>https://wojtek-rz.github.io/p/dive-into-your-assembly-code/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><guid>https://wojtek-rz.github.io/p/dive-into-your-assembly-code/</guid><description>&lt;p>When debugging or trying to
maximize the performance of a program, it is often
useful to look at the assembly code generated by the compiler.
There are many tutorials on how to generate assembly code with &lt;code>gcc&lt;/code> command,
but many times you have to work with a large, existing codebase that is composed
of many &lt;code>CMake&lt;/code> targets and library. In this article I will compare different methods
to read assembly code from C/C++ projects. Typical use cases are:&lt;/p>
&lt;ul>
&lt;li>When you are dealing with functions independent from the rest of the codebase,
or with a few files to analize, best universal tool is &amp;ldquo;Compiler Explorer&amp;rdquo;.&lt;/li>
&lt;li>When you are working with a large project that uses &lt;code>CMake&lt;/code>, you can use
default targets to see the assembly of &lt;code>cpp&lt;/code> files created by
&lt;code>CMake&lt;/code>. You can modify the flags used to generate that assembly, details in &amp;ldquo;GCC&amp;rdquo; and &amp;ldquo;CMake&amp;rdquo; sections.&lt;/li>
&lt;li>When you have a compiled object file you can use &lt;code>objdump&lt;/code> tool to see the assembly code, see &amp;ldquo;Assembly from object file&amp;rdquo; section.&lt;/li>
&lt;/ul>
&lt;h3 id="compiler-explorer">&lt;a href="#compiler-explorer" class="header-anchor">&lt;/a>Compiler Explorer
&lt;/h3>&lt;p>Compiler Explorer is a web-based tool that allows you to see assembly code
generated by compiler in &amp;ldquo;real time&amp;rdquo; (every change to source code recompiles the assembly). It was created by Matt Godbolt and is
available at &lt;a class="link" href="https://godbolt.org/" target="_blank" rel="noopener"
>godbolt.org&lt;/a>. It supports many compilers
and you can use it to compare the assembly code generated by different compilers. Assembly code is cleaned up and colorized, so it is easier to read. You can also see which lines of the assembly code correspond to which lines of the source code.&lt;/p>
&lt;p>Compiler Explorer can also be run locally. It is open source and available on &lt;a class="link" href="https://github.com/compiler-explorer/compiler-explorer" target="_blank" rel="noopener"
>GitHub&lt;/a>. To install
it, you need to have Node.js installed. Clone the repository and run &lt;code>make&lt;/code> in the root directory. This will install all the necessary dependencies, build the project, find the compilers installed on your system and start the http server. More detailed instructions can be found &lt;a class="link" href="https://www.youtube.com/watch?v=I2cKVRzJhS0" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>But most of the time you will want see the assembly of an existing project, containing multiple files and libraries. Fortunately, Compiler Explorer supports &lt;code>CMake&lt;/code>. When running locally, to load a project you have to:&lt;/p>
&lt;ul>
&lt;li>From the top menu `Add -&amp;gt; Tree (IDE Mode).&lt;/li>
&lt;li>From the Tree menu &lt;code>Project -&amp;gt; Choose file&lt;/code> and select zipped project file.&lt;/li>
&lt;li>Select &lt;code>CMake&lt;/code> checkbox.&lt;/li>
&lt;li>Choose build type for cmake, that would contain debug information (e.g. &lt;code>-DCMAKE_BUILD_TYPE=Debug&lt;/code>).&lt;/li>
&lt;li>Write name of the target you would like to compile&lt;/li>
&lt;li>Select &lt;code>Add new -&amp;gt; Compiler&lt;/code> and wait for it to compile.&lt;/li>
&lt;/ul>
&lt;p>The C++ project I currently work with has 160 files, so Godbolt had a tough challenge,
but the website successfully handled the challenge of compiling my project.
It wasn&amp;rsquo;t the smoothiest experience, but that&amp;rsquo;s understendable. The site was very slow,
and the project took 115 seconds to recompile every change (locally it takes 10 seconds,
because I can build it with 12 cpu cores). I had to change the timout value, which was 10
seconds by default (github issue &lt;a class="link" href="https://github.com/compiler-explorer/compiler-explorer/issues/601" target="_blank" rel="noopener"
>here&lt;/a>).
To do that you have to create a file from the root directory of the project called
&lt;code>etc/config/compiler-explorer.local.properties&lt;/code> and add the following line:
&lt;code>compileTimeoutMs=100000&lt;/code>.&lt;/p>
&lt;p>It was clear that the main use for the project is to work on server, not locally.
I could not see the output &lt;code>CMake&lt;/code> generated until the compilation was finished and the files I uploaded to the website were not the same as the ones I had on my computer.&lt;/p>
&lt;p>It&amp;rsquo;s important to note, that there exists a script from the compiler-explorer project called &lt;a class="link" href="https://github.com/compiler-explorer/asm-parser/tree/main" target="_blank" rel="noopener"
>&lt;code>asm-parser&lt;/code>&lt;/a>,
that will clean the assembly code.&lt;/p>
&lt;h3 id="compiling-with-gcc">&lt;a href="#compiling-with-gcc" class="header-anchor">&lt;/a>Compiling with GCC
&lt;/h3>&lt;p>Simple answer: use the &lt;a class="link" href="https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html#index-S" target="_blank" rel="noopener"
>&lt;code>-S&lt;/code>&lt;/a> option, which tells the compiler to stop after the assembly phase.
The result will be assembly code with &lt;code>.s&lt;/code> extension.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">g++ -S main.cpp -o main.s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Unless you can read AT&amp;amp;T assembly Syntax you will probably want to use the &lt;code>-masm=intel&lt;/code> option to get the Intel syntax.&lt;/p>
&lt;p>There are a few options to make assembly code more readable. The &lt;a class="link" href="https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#index-fverbose-asm" target="_blank" rel="noopener"
>&lt;code>-fverbose-asm&lt;/code>&lt;/a> option will add commentary from the original source code. It also adds the architecture and system information at the top of the file.&lt;/p>
&lt;p>You would like to also remove &lt;a class="link" href="https://stackoverflow.com/questions/2529185/what-are-cfi-directives-in-gnu-assembler-gas-used-for" target="_blank" rel="noopener"
>&lt;code>.cfi&lt;/code>&lt;/a> directives from your assembly,
as they are used for exception handling and debugging. To disable them
use &lt;code>-fno-asynchronous-unwind-tables&lt;/code>, &lt;code>-fno-exceptions&lt;/code> options. Also &lt;code>-fno-rtti&lt;/code> and &lt;code>-fno-dwarf2-cfi-asm&lt;/code> can be useful, as explained &lt;a class="link" href="https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">g++ -S -fverbose-asm -fno-asynchronous-unwind-tables -fno-dwarf2-cfi-asm -masm&lt;span class="o">=&lt;/span>intel main.cpp -o main.s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For example the following C++ code:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">test&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Will produce the following assembly code:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">_Z4testi:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> endbr64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push rbp &lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov rbp, rsp &lt;span class="c1">#,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov DWORD PTR -20&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, edi &lt;span class="c1"># n, n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># main.cpp:29: int total = 0;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov DWORD PTR -8&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, &lt;span class="m">0&lt;/span> &lt;span class="c1"># total,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># main.cpp:31: for (int i = 0; i &amp;lt; n; i++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov DWORD PTR -4&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, &lt;span class="m">0&lt;/span> &lt;span class="c1"># i,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># main.cpp:31: for (int i = 0; i &amp;lt; n; i++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jmp .L9 &lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.L10:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># main.cpp:32: total += i * i;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov eax, DWORD PTR -4&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span> &lt;span class="c1"># tmp85, i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> imul eax, eax &lt;span class="c1"># _1, tmp85&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># main.cpp:32: total += i * i;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add DWORD PTR -8&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, eax &lt;span class="c1"># total, _1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># main.cpp:31: for (int i = 0; i &amp;lt; n; i++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add DWORD PTR -4&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, &lt;span class="m">1&lt;/span> &lt;span class="c1"># i,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.L9:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># main.cpp:31: for (int i = 0; i &amp;lt; n; i++)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov eax, DWORD PTR -4&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span> &lt;span class="c1"># tmp86, i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cmp eax, DWORD PTR -20&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span> &lt;span class="c1"># tmp86, n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jl .L10 &lt;span class="c1">#,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># main.cpp:34: return total;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mov eax, DWORD PTR -8&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span> &lt;span class="c1"># _7, total&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># main.cpp:35: }&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pop rbp &lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>But assembly code won&amp;rsquo;t always be as readable as this. In most useful cases,
you will compile your code with optimization enabled, which will make the
assembly code harder to read, as the compiler can also change the order of
instructions, remove some of them, or inline some functions.&lt;/p>
&lt;p>You can also try different approach. Instead of creating assembly file with
cpp lines as commentary, you could create a source code with compiled assembly
pieces. This can be done with (&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/gcc/Assembler-Options.html" target="_blank" rel="noopener"
>&lt;code>-Wa&lt;/code>&lt;/a>) option.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-a[sub-option...] turn on listings
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Sub-options [default hls]:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c omit false conditionals
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> d omit debugging directives
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> g include general info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> h include high-level source
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> l include assembly
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m include macro expansions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> n omit forms processing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s include symbols
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> =FILE list to FILE (must be last sub-option)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We pass to assembler options &lt;code>adhl&lt;/code>, so we add &lt;code>-Wa,-adhl&lt;/code>. The output would
not be valid assembly code, but it will be assembly list mixed with source code.
You also have to pass &lt;code>g&lt;/code> option to GCC, so the assembler can match source code
with assembly code. I also added options to remove &lt;code>.cfi&lt;/code> directives from previous
example.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">g++ -g -fno-asynchronous-unwind-tables -fno-dwarf2-cfi-asm -masm&lt;span class="o">=&lt;/span>intel -Wa,-dhln main.cpp &amp;gt; main.lst
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl"> 26:main.cpp ****
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 27:main.cpp **** int &lt;span class="nb">test&lt;/span> &lt;span class="o">(&lt;/span>int n&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 28:main.cpp **** &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">159&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">28&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">160&lt;/span> &lt;span class="m">0000&lt;/span> F30F1EFA endbr64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">161&lt;/span> &lt;span class="m">0004&lt;/span> &lt;span class="m">55&lt;/span> push rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">162&lt;/span> .LCFI9:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">163&lt;/span> &lt;span class="m">0005&lt;/span> 4889E5 mov rbp, rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">164&lt;/span> .LCFI10:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">165&lt;/span> &lt;span class="m">0008&lt;/span> 897DEC mov DWORD PTR -20&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, edi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29:main.cpp **** int &lt;span class="nv">total&lt;/span> &lt;span class="o">=&lt;/span> 0&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">166&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">29&lt;/span> &lt;span class="m">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">167&lt;/span> 000b C745F800 mov DWORD PTR -8&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">167&lt;/span> &lt;span class="m">000000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">168&lt;/span> .LBB4:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 30:main.cpp ****
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 31:main.cpp **** &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>int &lt;span class="nv">i&lt;/span> &lt;span class="o">=&lt;/span> 0&lt;span class="p">;&lt;/span> i &amp;lt; n&lt;span class="p">;&lt;/span> i++&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">169&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">31&lt;/span> &lt;span class="m">12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">170&lt;/span> &lt;span class="m">0012&lt;/span> C745FC00 mov DWORD PTR -4&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">170&lt;/span> &lt;span class="m">000000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">171&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">31&lt;/span> &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">172&lt;/span> &lt;span class="m">0019&lt;/span> EB0D jmp .L9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">173&lt;/span> .L10:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 32:main.cpp **** &lt;span class="nv">total&lt;/span> &lt;span class="o">+=&lt;/span> i * i&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">174&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">32&lt;/span> &lt;span class="m">16&lt;/span> discriminator &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">175&lt;/span> 001b 8B45FC mov eax, DWORD PTR -4&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">176&lt;/span> 001e 0FAFC0 imul eax, eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">177&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">32&lt;/span> &lt;span class="m">11&lt;/span> discriminator &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">178&lt;/span> &lt;span class="m">0021&lt;/span> 0145F8 add DWORD PTR -8&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 31:main.cpp **** &lt;span class="nv">total&lt;/span> &lt;span class="o">+=&lt;/span> i * i&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">179&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">31&lt;/span> &lt;span class="m">3&lt;/span> discriminator &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">180&lt;/span> &lt;span class="m">0024&lt;/span> 8345FC01 add DWORD PTR -4&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>, &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">181&lt;/span> .L9:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 31:main.cpp **** &lt;span class="nv">total&lt;/span> &lt;span class="o">+=&lt;/span> i * i&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">182&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">31&lt;/span> &lt;span class="m">21&lt;/span> discriminator &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">183&lt;/span> &lt;span class="m">0028&lt;/span> 8B45FC mov eax, DWORD PTR -4&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">184&lt;/span> 002b 3B45EC cmp eax, DWORD PTR -20&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">185&lt;/span> 002e 7CEB jl .L10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">186&lt;/span> .LBE4:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 33:main.cpp ****
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 34:main.cpp **** &lt;span class="k">return&lt;/span> total&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">187&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">34&lt;/span> &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">188&lt;/span> &lt;span class="m">0030&lt;/span> 8B45F8 mov eax, DWORD PTR -8&lt;span class="o">[&lt;/span>rbp&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 35:main.cpp **** &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">189&lt;/span> .loc &lt;span class="m">1&lt;/span> &lt;span class="m">35&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">190&lt;/span> &lt;span class="m">0033&lt;/span> 5D pop rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">191&lt;/span> .LCFI11:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">192&lt;/span> &lt;span class="m">0034&lt;/span> C3 ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>However we have those &lt;code>.loc&lt;/code> directives, which are used for debugging, so
in my view the result of this method looks more messy.&lt;/p>
&lt;p>Another alternative, would be to use &lt;code>save-temps&lt;/code> option, which will save all
intermediate files (&lt;code>.s&lt;/code> for assembly output, &lt;code>.i&lt;/code> for preprocessed input file).
This can be easily added to compiler options in your build tool. The results
are localted in the build directory, inside the subdirectory for the CMake target.&lt;/p>
&lt;h3 id="assembly-from-object-file">&lt;a href="#assembly-from-object-file" class="header-anchor">&lt;/a>Assembly from object file
&lt;/h3>&lt;p>Sometime you may want to see the assembly code from object file. You can use
&lt;code>objdump&lt;/code> tool for that. For example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">objdump -d -M intel main.o &amp;gt; deas.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Where &lt;code>-d,--disassemble&lt;/code> option tells &lt;code>objdump&lt;/code> to display the assembler code,
and &lt;code>-M&lt;/code> option tells &lt;code>objdump&lt;/code> to use Intel syntax.&lt;/p>
&lt;p>Result:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">00000000000012c9 &amp;lt;_Z4testi&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12c9: f3 0f 1e fa endbr64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12cd: &lt;span class="m">55&lt;/span> push rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12ce: &lt;span class="m">48&lt;/span> &lt;span class="m">89&lt;/span> e5 mov rbp,rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12d1: &lt;span class="m">89&lt;/span> 7d ec mov DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x14&lt;span class="o">]&lt;/span>,edi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12d4: c7 &lt;span class="m">45&lt;/span> f8 &lt;span class="m">00&lt;/span> &lt;span class="m">00&lt;/span> &lt;span class="m">00&lt;/span> &lt;span class="m">00&lt;/span> mov DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x8&lt;span class="o">]&lt;/span>,0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12db: c7 &lt;span class="m">45&lt;/span> &lt;span class="nb">fc&lt;/span> &lt;span class="m">00&lt;/span> &lt;span class="m">00&lt;/span> &lt;span class="m">00&lt;/span> &lt;span class="m">00&lt;/span> mov DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x4&lt;span class="o">]&lt;/span>,0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12e2: eb 0d jmp 12f1 &amp;lt;_Z4testi+0x28&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12e4: 8b &lt;span class="m">45&lt;/span> &lt;span class="nb">fc&lt;/span> mov eax,DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x4&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12e7: 0f af c0 imul eax,eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12ea: &lt;span class="m">01&lt;/span> &lt;span class="m">45&lt;/span> f8 add DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x8&lt;span class="o">]&lt;/span>,eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12ed: &lt;span class="m">83&lt;/span> &lt;span class="m">45&lt;/span> &lt;span class="nb">fc&lt;/span> &lt;span class="m">01&lt;/span> add DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x4&lt;span class="o">]&lt;/span>,0x1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12f1: 8b &lt;span class="m">45&lt;/span> &lt;span class="nb">fc&lt;/span> mov eax,DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x4&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12f4: 3b &lt;span class="m">45&lt;/span> ec cmp eax,DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x14&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12f7: 7c eb jl 12e4 &amp;lt;_Z4testi+0x1b&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12f9: 8b &lt;span class="m">45&lt;/span> f8 mov eax,DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x8&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12fc: 5d pop rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12fd: c3 ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can see (here and in previous examples) that the names of the functions are mangled and not easily readable. However, in &lt;code>objdump&lt;/code> you can use &lt;code>-C&lt;/code> option to demangle the names.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">00000000000012c9 &amp;lt;test&lt;span class="o">(&lt;/span>int&lt;span class="o">)&lt;/span>&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12c9: f3 0f 1e fa endbr64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 12cd: &lt;span class="m">55&lt;/span> push rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can also see the assembly code of only one function with &lt;code>-disassemble=name&lt;/code> option.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">objdump --disassemble&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test(int)&amp;#34;&lt;/span> -C -M intel main.o &amp;gt; deassembled_test.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note that without &lt;code>-C&lt;/code> option, the name of the function would have to be mangled.&lt;/p>
&lt;p>We can also have source codes comments in our assembly with &lt;code>-S&lt;/code> option, but only when the object was compiled with &lt;code>-g&lt;/code> option. Another useful option is &lt;code>--no-show-raw-insn&lt;/code> which doesn&amp;rsquo;t show raw bytes of machine code, &lt;code>-r&lt;/code> which displays relocation entries and &lt;code>-w&lt;/code> option which disables line wrapping of long machine code lines. We can shorten &lt;code>-C -S -r&lt;/code> to &lt;code>-CSr&lt;/code> option.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">objdump --disassemble&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test(int)&amp;#34;&lt;/span> -CSr --no-show-raw-insn -M intel main.o &amp;gt; deassembled_test_dbg.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="m">0000000000001129&lt;/span> &amp;lt;test&lt;span class="o">(&lt;/span>int&lt;span class="o">)&lt;/span>&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int &lt;span class="nb">test&lt;/span> &lt;span class="o">(&lt;/span>int n&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1129: endbr64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 112d: push rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 112e: mov rbp,rsp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1131: mov DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x14&lt;span class="o">]&lt;/span>,edi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int &lt;span class="nv">total&lt;/span> &lt;span class="o">=&lt;/span> 0&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1134: mov DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x8&lt;span class="o">]&lt;/span>,0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>int &lt;span class="nv">i&lt;/span> &lt;span class="o">=&lt;/span> 0&lt;span class="p">;&lt;/span> i &amp;lt; n&lt;span class="p">;&lt;/span> i++&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 113b: mov DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x4&lt;span class="o">]&lt;/span>,0x0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1142: jmp &lt;span class="m">1151&lt;/span> &amp;lt;test&lt;span class="o">(&lt;/span>int&lt;span class="o">)&lt;/span>+0x28&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">total&lt;/span> &lt;span class="o">+=&lt;/span> i * i&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1144: mov eax,DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x4&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1147: imul eax,eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 114a: add DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x8&lt;span class="o">]&lt;/span>,eax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>int &lt;span class="nv">i&lt;/span> &lt;span class="o">=&lt;/span> 0&lt;span class="p">;&lt;/span> i &amp;lt; n&lt;span class="p">;&lt;/span> i++&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 114d: add DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x4&lt;span class="o">]&lt;/span>,0x1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1151: mov eax,DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x4&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1154: cmp eax,DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x14&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1157: jl &lt;span class="m">1144&lt;/span> &amp;lt;test&lt;span class="o">(&lt;/span>int&lt;span class="o">)&lt;/span>+0x1b&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> total&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1159: mov eax,DWORD PTR &lt;span class="o">[&lt;/span>rbp-0x8&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 115c: pop rbp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 115d: ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="when-using-cmake">&lt;a href="#when-using-cmake" class="header-anchor">&lt;/a>When using CMake
&lt;/h3>&lt;p>CMake creates targets for each &lt;code>.cpp&lt;/code> file. Targets are named the same as the source file, but with different extension. There are targets for:&lt;/p>
&lt;ul>
&lt;li>assembly code before passed to assembler, with &lt;code>.s&lt;/code> extension,&lt;/li>
&lt;li>preprocessed source code, with &lt;code>.i&lt;/code> extension.&lt;/li>
&lt;/ul>
&lt;p>It is important to note, that when using many &lt;code>CMake&lt;/code> subdirectories the targets are created in the &lt;a class="link" href="https://cmake.org/cmake/help/latest/command/add_subdirectory.html" target="_blank" rel="noopener"
>&lt;code>binary_dir&lt;/code>&lt;/a> of the target&amp;rsquo;s &lt;code>CMakeLists.txt&lt;/code> and not the base build directory.
So if you would like to generate assembly code for a target &lt;code>src/foo/bar/fun.cpp&lt;/code> you would run &lt;code>make src/foo/bar/fun.s&lt;/code>
from the appropriate build directory.&lt;/p>
&lt;p>We can see that the generated assembly code is not very readable, beacause we have the same problems as with the previous examples. Fortunately, we can modify flags for the target with &lt;code>CMAKE_CXX_CREATE_ASSEMBLY_SOURCE&lt;/code> variable, which is not documented but works.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cmake" data-lang="cmake">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">CMAKE_CXX_CREATE_ASSEMBLY_SOURCE&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;CMAKE_CXX_COMPILER&amp;gt; $(CXX_DEFINES) $(CXX_INCLUDES) ${CMAKE_CXX_FLAGS} -S -fverbose-asm -fno-asynchronous-unwind-tables -fno-exceptions -masm=intel &amp;lt;SOURCE&amp;gt; -o &amp;lt;ASSEMBLY_SOURCE&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The names are still mangled, but we can demangle them with some auxiliary tool.
Besides that, I have encountered strange bug, that &lt;code>add_compile_options&lt;/code> command did not add options to the assembly target (maybe because it was redefined later)
and as a consequence the assemblies targets were compiled with different flags than the release build we wanted to optimize. Also be careful to run these &lt;code>.s&lt;/code> and &lt;code>.i&lt;/code> targets
without defining &lt;code>CMAKE_CXX_CREATE_ASSEMBLY_SOURCE&lt;/code> flags explicitly, as in my case they included both the debug build flags and the release build flags.&lt;/p>
&lt;p>Futher reading:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.systutorials.com/generate-a-mixed-source-and-assembly-listing-using-gcc/" target="_blank" rel="noopener"
>https://www.systutorials.com/generate-a-mixed-source-and-assembly-listing-using-gcc/&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/69028715/include-external-header-file-for-c-on-compiler-explorer" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/69028715/include-external-header-file-for-c-on-compiler-explorer&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/38552116/how-to-remove-noise-from-gcc-clang-assembly-output&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>