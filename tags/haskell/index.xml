<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Haskell on Wojtek Rzeplinski's website</title><link>https://wojtek-rz.github.io/tags/haskell/</link><description>Recent content in Haskell on Wojtek Rzeplinski's website</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 12 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://wojtek-rz.github.io/tags/haskell/index.xml" rel="self" type="application/rss+xml"/><item><title>From Code to Execution: Running Haskell Programs on the Web</title><link>https://wojtek-rz.github.io/p/from-code-to-execution-running-haskell-programs-on-the-web/</link><pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate><guid>https://wojtek-rz.github.io/p/from-code-to-execution-running-haskell-programs-on-the-web/</guid><description>&lt;p>Have you ever had the feeling that you have written a cool script or program and you want to show it to the world? If so, then what would be the best way
to show it to everyone? I always think about two aspects of a good demo.
The first one is whether potential user can experience and play with your software.
The second one how much effort the potential user has to put in to load and configure
your software.&lt;/p>
&lt;p>One of the best ways to present your software is to embbed it inside web application.
That way, there is no downloading the codebase (explicitely) and no configuration for the user.
Someone can just enter the website and start toying with your programs - great example is
&lt;a class="link" href="https://huggingface.co/" target="_blank" rel="noopener"
>huggingface&lt;/a> where we can play with the models from the frontend UI.&lt;/p>
&lt;p>Here I focus on programs with command line interface to communicate with the world.
Some time ago I created an interpreter of the programming language of my invention - &lt;a class="link" href="https://github.com/wojtek-rz/mim-projekty/tree/main/Programming%20languages%20and%20paradigms/Emilia%20Programming%20Language" target="_blank" rel="noopener"
>Emilia
Programming Language&lt;/a>. It is written
in Haskell and uses CLI to communicate with the world. The online demo can be found &lt;a class="link" href="https://wojteks-misc-files.pages.dev/" target="_blank" rel="noopener"
>here&lt;/a> - note that it needs a couple of seconds to load (it&amp;rsquo;s one of the downsides of Webassembly&amp;hellip;).&lt;/p>
&lt;p>I want to embed my Haskell interpreter on a website. I could do this by creating backend service on a &amp;ldquo;compute instance&amp;rdquo; in the cloud that would run the Emilia executable, but I would like to avoid that cost, to keep the demo as cheap as possible for me.&lt;/p>
&lt;h2 id="thing-about-webassembly">&lt;a href="#thing-about-webassembly" class="header-anchor">&lt;/a>Thing about WebAssembly
&lt;/h2>&lt;p>Actually there is a way to do all the computation on the client side. And I don&amp;rsquo;t have to rewrite all interpreter to Javascript to do that. The answer is &lt;strong>WebAssembly&lt;/strong>.&lt;/p>
&lt;p>It is a low -evel programming code with assebmler-like instruction set designed for near-native performance. Web browsers implement WebAssembly interpreters and compilers, allowing for much faster execution than Javascript.
Many programming language compilers and their extensions allow compilation to
WebAssembly in addition to compilation to machine code. (Clang, Go, Haskell).&lt;/p>
&lt;p>Note that this is only the concise tutorial of the steps I had to take in my project.
If you&amp;rsquo;re not fammilliar with WebAssembly you won&amp;rsquo;t find detailed explanation of all the concepts here.&lt;/p>
&lt;h2 id="compiling-haskell-to-webassembly">&lt;a href="#compiling-haskell-to-webassembly" class="header-anchor">&lt;/a>Compiling Haskell to WebAssembly
&lt;/h2>&lt;p>The first thing I had to do was to compile haskell into wasm (WebAssembly), which
is probably a thing only a handful of developers have done. Fortunately the creators
of Haskell compiler (GHC) have created a GHC backend that compiles to wasm. The official
tutorial is available &lt;a class="link" href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/wasm.html" target="_blank" rel="noopener"
>here&lt;/a> and you can download the project &lt;a class="link" href="https://gitlab.haskell.org/ghc/ghc-wasm-meta" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>After running the instalation script all the tools should be available inside
&lt;code>~/.ghc-wasm&lt;/code>. You should run &lt;code>source ~/.ghc-wasm/env&lt;/code> to add the tools and
environment variables to &lt;code>PATH&lt;/code>. Then instead of &lt;code>ghc&lt;/code>, &lt;code>ghc-pkg&lt;/code>, &lt;code>hsc2hs&lt;/code> you should use their alternative versions &lt;code>wasm32-wasi-ghc&lt;/code>, &lt;code>wasm32-wasi-ghc-pkg&lt;/code>
and &lt;code>wasm32-wasi-hsc2hs&lt;/code>. There is also wrapper for cabal that uses wasm backend for compiling and linking the code: &lt;code>wasm32-wasi-cabal&lt;/code>.&lt;/p>
&lt;p>My project was written with &lt;code>cabal&lt;/code> building tool, so instead of &lt;code>cabal build emilia-lang-exe&lt;/code> I write:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wasm32-wasi-cabal build emilia-lang-exe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Make sure that your project uses one thread for execution (rts -N option),
otherwise the project won&amp;rsquo;t compile.
{:.notice&amp;ndash;warning}&lt;/p>
&lt;p>Then you can find the compiled wasm binary inside by running &lt;code>cabal list-bin exe:emilia-lang-exe&lt;/code>, and copy it to our current workplace.&lt;/p>
&lt;p>As a result we obtained &lt;code>emilia-lang-exe.wasm&lt;/code> binary file written in WebAssembly.
You can run it with wasm runtime, a separate program, like &lt;code>wasmtime&lt;/code> that
came with the &lt;code>wasm-ghc&lt;/code> and should be in your path.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wasmtime run emilia-lang-exe.wasm --help
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Usage: emilia-lang-exe &amp;lt;file&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> emilia-lang-exe --repl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> emilia-lang-exe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">If no file is provided, executable will read from stdin.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can also run this file in the browser and this is what we are going to do.&lt;/p>
&lt;h2 id="running-webassembly-binary-in-the-browser">&lt;a href="#running-webassembly-binary-in-the-browser" class="header-anchor">&lt;/a>Running WebAssembly binary in the browser
&lt;/h2>&lt;p>Moderm browsers come with the wasm interpreter out of the box. But our CLI binary requires one more thing to run, that is IO interface, a way to communicate with the external world. This was build in the &lt;code>wasmtime&lt;/code> interpreter that we already used. Along with some other useful things like: file operations, time and random utilities they create a set of functions called a &lt;strong>runtime&lt;/strong>.&lt;/p>
&lt;p>We need a bridge that would connect external world to our program. The most established one is called &lt;a class="link" href="https://docs.wasmer.io/sdk/wasmer-js" target="_blank" rel="noopener"
>Wasmer&lt;/a>.&lt;/p>
&lt;p>The easiest way is to create a node project with bundler, for example with Vite.
After creating you have to install &lt;code>wasmer-sdk&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npm install -S @wasmer/sdk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then you can import it inside main javascript (typescript) file, for example &lt;code>index.ts&lt;/code> and use it. On the official website there is simple example of how to
use Python binary:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">init&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Wasmer&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;@wasmer/sdk&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">await&lt;/span> &lt;span class="nx">init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">pkg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">Wasmer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fromRegistry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;python/python@3.12&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">pkg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">entrypoint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">run&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">args&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;-c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;print(&amp;#39;Hello, World!&amp;#39;)&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">stdout&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">wait&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Python exited with &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">stdout&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In our use case we would like to emulate terminal in the browser. The program that would be executed inside it is &lt;code>emilia-lang-exe&lt;/code> binary.&lt;/p>
&lt;h2 id="creating-terminal-frontend">&lt;a href="#creating-terminal-frontend" class="header-anchor">&lt;/a>Creating terminal frontend
&lt;/h2>&lt;p>There is altready javascript library that generates component with nice looking UI and handy functions and is
calld &lt;a class="link" href="https://xtermjs.org/" target="_blank" rel="noopener"
>xterm&lt;/a>. To install the npm module:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npm install @xterm/xterm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Add to &lt;code>index.html&lt;/code> file the following content:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;!doctype html&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;head&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;title&amp;gt;Wasmer Shell&amp;lt;/title&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;script type=&amp;#34;module&amp;#34; defer src=&amp;#34;index.ts&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/head&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;body&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;div id=&amp;#34;terminal&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/body&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/html&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It will load the &lt;code>index.ts&lt;/code> file with our script.&lt;/p>
&lt;p>Inside of it we would like to download the binary from url:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">type&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Instance&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;@wasmer/sdk&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This will save in url variable path to static file with the wasm binary
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">url&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;./emilia-lang-exe.wasm?url&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">init&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">initializeLogger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">runWasix&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="kr">import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;@wasmer/sdk&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">await&lt;/span> &lt;span class="nx">init&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">module&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">WebAssembly&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">compileStreaming&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">runWasix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">module&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">program&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;emilia-lang-exe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">args&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;--repl&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To connect instances input and output to terminal&amp;rsquo;s intput and output we need helper function:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">connectStreams&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">term&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Terminal&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">stdin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stdin&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getWriter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">term&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">bufforDoubleEnter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">stdin&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">encoder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="nx">term&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stdout&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">WritableStream&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">write&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">chunk&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">term&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stderr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipeTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">WritableStream&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">write&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">chunk&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">term&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Initialization of the terminal addon:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="s2">&amp;#34;xterm/css/xterm.css&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Terminal&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@xterm/xterm&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">WebLinksAddon&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@xterm/addon-web-links&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">term&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Terminal&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">cursorBlink&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">convertEol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">term&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;terminal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">term&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loadAddon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">WebLinksAddon&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">term&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeln&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Starting...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And to connect the instance to the terminal we our helper function:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">connectStreams&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">term&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="problems">&lt;a href="#problems" class="header-anchor">&lt;/a>Problems
&lt;/h3>&lt;p>After we put everything together we see some major problems. After presssing &amp;ldquo;Enter&amp;rdquo; the console is not creating the new line, nor it is sending the line to the
interpreter. &amp;ldquo;Backspace&amp;rdquo; also doesn&amp;rsquo;t work.&lt;/p>
&lt;p>After some digging it appears that there exists something called &lt;a class="link" href="https://en.wikipedia.org/wiki/Line_discipline" target="_blank" rel="noopener"
>line discipline&lt;/a> and it&amp;rsquo;s main tasks include:&lt;/p>
&lt;blockquote>
&lt;p>For example, the standard line discipline processes the data it receives from the hardware driver and from applications writing to the device according to the requirements of a terminal on a Unix-like system. On input, it handles special characters such as the interrupt character (typically Control-C) and the erase and kill characters (typically backspace or delete, and Control-U, respectively) and, on output, it replaces all the LF characters with a CR/LF sequence.&lt;/p>
&lt;/blockquote>
&lt;p>Our problem can be solved by &lt;a class="link" href="https://github.com/mame/xterm-pty?tab=readme-ov-file" target="_blank" rel="noopener"
>xterm-pty&lt;/a> module.&lt;/p>
&lt;p>A PTY, or pseudoterminal, is an intermediate layer between a process and a terminal. It is not just a pipe, but provides several useful functionalities such as input echo, line editing, conversion, etc. PTY is essential for running real-world CUI programs.&lt;/p>
&lt;p>Usually, xterm.js is used with node-pty. Because node-pty is a binding for the PTY functions provided by the operating system, it does not work on a browser. On the other hand, xterm-pty works on a browser because it has an own implementation of simple Linux-like line discipline.&lt;/p>
&lt;p>To add it to our project we have to install the node module:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npm i xterm-pty
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then we add the following lines:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">openpty&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;xterm-pty&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">master&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">slave&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">openpty&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">term&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loadAddon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">master&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">slave&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Starting...\n&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// instance initalization...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">connectStreams&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">slave&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hosting">&lt;a href="#hosting" class="header-anchor">&lt;/a>Hosting
&lt;/h2>&lt;p>After running&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">npm run build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>to build the static website, the result can be available &lt;a class="link" href="https://wojteks-misc-files.pages.dev/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>The wasmer sdk library doesn&amp;rsquo;t work out of the box. It uses javascript&amp;rsquo;s &lt;code>sharedArrayBuffer&lt;/code> to communicate between threads and most browsers block this functionality, unless the headers
&lt;code>Cross-Origin-Opener-Policy: same-origin&lt;/code> and &lt;code>Cross-Origin-Embedder-Policy: require-corp&lt;/code> are present.
{:.notice&amp;ndash;warning}&lt;/p>
&lt;p>All in all, it was a complicated trip, but every problem was solved in the end.
I certainly learned a lot along the way.&lt;/p>
&lt;p>Thanks for reading,
Wojtek&lt;/p></description></item><item><title>Global variables in Haskell with MonadReader!</title><link>https://wojtek-rz.github.io/p/global-variables-in-haskell-with-monadreader/</link><pubDate>Sat, 30 Mar 2024 00:00:00 +0000</pubDate><guid>https://wojtek-rz.github.io/p/global-variables-in-haskell-with-monadreader/</guid><description>&lt;h1 id="what-is-monad-reader-in-haskell">&lt;a href="#what-is-monad-reader-in-haskell" class="header-anchor">&lt;/a>What is Monad Reader in Haskell?
&lt;/h1>&lt;p>Understanding the &lt;code>MonadReader&lt;/code> class in Haskell can be challenging.
Online tutorials often focus on implementation details rather than its purpose and usefulness.
By the end of this post, you&amp;rsquo;ll have a clear understanding of how MonadReader streamlines
environment passing in Haskell, making your code cleaner and more maintainable.&lt;/p>
&lt;h3 id="motivation">&lt;a href="#motivation" class="header-anchor">&lt;/a>Motivation
&lt;/h3>&lt;p>The term &amp;lsquo;monad reader&amp;rsquo; comes from the idea that all functions read from a common source.&lt;/p>
&lt;p>For example, suppose you have a global configuration variable that several functions read from.
By using a MonadReader, you can avoid passing that configuration as an argument to each function.
The result of our monad would be a function takes this global variable as an argument and
then passes it to each function within it.&lt;/p>
&lt;p>Here is a simple example. Suppose we are calculating the total cost of a trip to Europe.
We visit three countries, each with its own currency:
GBP in the UK, EUR in France and CHF in Switzerland.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">exchangeRateToPln&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">exchangeRateToPln&lt;/span> &lt;span class="s">&amp;#34;EUR&amp;#34;&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="mf">4.3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">exchangeRateToPln&lt;/span> &lt;span class="s">&amp;#34;GBP&amp;#34;&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="mf">4.9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">exchangeRateToPln&lt;/span> &lt;span class="s">&amp;#34;CHF&amp;#34;&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="mf">3.9&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We want to pass a dictionary of currency rates to any function that needs them.
The functions can have different numbers of arguments,
but they have one thing in common - &lt;strong>the last argument is of type &lt;code>ExchangeRate&lt;/code>&lt;/strong>.
(the implementation is not important here).&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">getSwitzerlandCost&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">Int&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">getSwitzerlandCost&lt;/span> &lt;span class="n">days&lt;/span> &lt;span class="n">nightCost&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">fromIntegral&lt;/span> &lt;span class="n">days&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">nightCost&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="s">&amp;#34;CHF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">getUKCost&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">Double&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">getUKCost&lt;/span> &lt;span class="n">flightCost&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="mf">2.0&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">flightCost&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="s">&amp;#34;GBP&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">getFranceCost&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">Double&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">getFranceCost&lt;/span> &lt;span class="n">distance&lt;/span> &lt;span class="n">fuelCost&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="mf">2.0&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">distance&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">fuelCost&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">rate&lt;/span> &lt;span class="s">&amp;#34;EUR&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Calculating the total cost is now straightforward:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateTotalCost&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateTotalCost&lt;/span> &lt;span class="n">exchangeRateToPln&lt;/span> &lt;span class="ow">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">let&lt;/span> &lt;span class="n">switzerlandCost&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">getSwitzerlandCost&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="mf">100.0&lt;/span> &lt;span class="n">exchangeRateToPln&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ukCost&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">getUKCost&lt;/span> &lt;span class="mf">200.0&lt;/span> &lt;span class="n">exchangeRateToPln&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">franceCost&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">getFranceCost&lt;/span> &lt;span class="mf">1000.0&lt;/span> &lt;span class="mf">1.5&lt;/span> &lt;span class="n">exchangeRateToPln&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">in&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">switzerlandCost&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">ukCost&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">franceCost&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Maybe we could get rid of the repetitive &lt;code>exchangeRateToPln&lt;/code>? That&amp;rsquo;s what
Monad Reader does. It hides the last argument of each function call,
so that it behaves like an abstract global variable that is passed unchanged to every
to any function in our monad. It is often called the &lt;code>config&lt;/code> or &lt;code>environment&lt;/code> argument.
The syntax of our monad is as follows:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateTotalCost&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateTotalCost&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kr">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">switzerlandCost&lt;/span> &lt;span class="ow">&amp;lt;-&lt;/span> &lt;span class="n">getSwitzerlandCost&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="mf">100.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ukCost&lt;/span> &lt;span class="ow">&amp;lt;-&lt;/span> &lt;span class="n">getUKCost&lt;/span> &lt;span class="mf">200.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">franceCost&lt;/span> &lt;span class="ow">&amp;lt;-&lt;/span> &lt;span class="n">getFranceCost&lt;/span> &lt;span class="mf">1000.0&lt;/span> &lt;span class="mf">1.5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">switzerlandCost&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">ukCost&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">franceCost&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>What if we want to write something like &lt;code>gifts &amp;lt;- 100&lt;/code>? The &lt;code>100&lt;/code> is a value,
not a function that takes &lt;code>ExchangeRate&lt;/code> as its last argument. We would write
&lt;code>gifts &amp;lt;- return 100&lt;/code> and that&amp;rsquo;s the monadic way to do it.&lt;/p>
&lt;p>Believe it or not, but in the last code example we actually used a MonadReader.
The monadic type here is &lt;code>ExchangeRate -&amp;gt; Double&lt;/code>, but we can abstract away
the implementation details here and write it with the &lt;code>Reader&lt;/code> constructor
from &lt;code>Control.Monad.Reader&lt;/code> library:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateTotalCost&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- is the same as&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateTotalCost&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">Reader&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="kt">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- in general:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Reader Env(last argument of functions / environment) Value(return value of the monad) &lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>What if we want to store &lt;code>Environment&lt;/code> value in a &amp;ldquo;variable&amp;rdquo;? That&amp;rsquo;s what identity function does:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateTotalCost&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kr">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exchangeRate&lt;/span> &lt;span class="ow">&amp;lt;-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can also run some function with changed environment. The most popular use case is when writing interpreters,
but let&amp;rsquo;s say we want to calculate the cost of our trip if the economic crisis were to hit.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">changeToCrisisRates&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">changeToCrisisRates&lt;/span> &lt;span class="n">rates&lt;/span> &lt;span class="n">currency&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">rates&lt;/span> &lt;span class="n">currency&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateTotalCostWhenCrisis&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">ExchangeRate&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateTotalCostWhenCrisis&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kr">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rates&lt;/span> &lt;span class="ow">&amp;lt;-&lt;/span> &lt;span class="n">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">calculateTotalCost&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">changeToWarRates&lt;/span> &lt;span class="n">rates&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here we have a function that changes the environment &lt;code>changeToCrisisRates :: ExchangeRate -&amp;gt; ExchangeRate&lt;/code>
and we run the &lt;code>calculateTotalCost&lt;/code> calculation with the modified environment.&lt;/p>
&lt;p>These two applications are so common,
that they deserve separate functions within the MonadReader class:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ask&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="kt">Reader&lt;/span> &lt;span class="kt">Env&lt;/span> &lt;span class="kt">Env&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- monad that returns Env&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">local&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Env&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Env&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Reader&lt;/span> &lt;span class="kt">Env&lt;/span> &lt;span class="kt">Val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Reader&lt;/span> &lt;span class="kt">Env&lt;/span> &lt;span class="kt">Val&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Given a function to modify Env and current calculation,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- return calculation that would run with modified Env.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Type &lt;code>Env&lt;/code> denotes the environment type, which in our example
is &lt;code>ExchangeRate&lt;/code>.&lt;/p>
&lt;p>Another useful function is &lt;code>asks&lt;/code> which helps with the problem: what if I want to get
only part of Env, not the whole Env.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">asks&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Env&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Reader&lt;/span> &lt;span class="kt">Env&lt;/span> &lt;span class="n">a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- given Env selector, create calculation that &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- runs selector on Env and returns the value&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="implementation-details">&lt;a href="#implementation-details" class="header-anchor">&lt;/a>Implementation details
&lt;/h3>&lt;p>Let&amp;rsquo;s try to implement this monad. What is a monadic type here?
Remember, that left arrow &lt;code>&amp;lt;-&lt;/code> notation is a syntax for &lt;code>&amp;gt;&amp;gt;=&lt;/code> with lambda expressions:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateCost&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kr">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="ow">&amp;lt;-&lt;/span> &lt;span class="n">getUKCost&lt;/span> &lt;span class="mf">200.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">return&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- is equal to&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">calculateCost&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kr">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">getUKCost&lt;/span> &lt;span class="mf">200.0&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">return&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So &lt;code>getUKCost 200.0&lt;/code> is of type &lt;code>ExchangeRate -&amp;gt; Double&lt;/code> which should be our monadic
value. More generally, if &lt;code>m&lt;/code> is our monad we would like to have:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">m a == Env -&amp;gt; a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So here, the monad is a function, that takes environment and returns a value.
A useful interpetation is that monads are containers for some values.
How can a function be a container? Actually, if we have a function `_ -&amp;gt; 10&amp;rsquo;
then no matter what we give it as an argument we will get 10.
This makes it 100% certain to hold the value 10. How do we chain such monads?
We would like to implement bind function with type:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;=&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;=&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Env&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Env&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It takes a monadic value with type &lt;code>m a&lt;/code> and passed the value &lt;code>a&lt;/code> to the function,
which returns the monadic value &lt;code>m b&lt;/code>. But to get value &lt;code>a&lt;/code> from monad
&lt;code>Env -&amp;gt; a&lt;/code> we have to pass &lt;code>Env&lt;/code>. And that&amp;rsquo;s exacly how we implement it:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="nf">\&lt;/span>&lt;span class="n">w&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">w&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We get the value from &lt;code>h&lt;/code> with &lt;code>h w&lt;/code> and pass it to &lt;code>f&lt;/code>. Because the result of bind
must also have monadic value &lt;code>m b == Env -&amp;gt; b&lt;/code>, and the result of &lt;code>f&lt;/code> is a value
inside the function container, we have to pass again &lt;code>w&lt;/code> to the result &lt;code>f (h w)&lt;/code> to
get the value inside the monad.&lt;/p>
&lt;p>And even pure arithmetic has an interesting interpretation. It is a calculation
that ignores the result and always returns the value.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="nf">\&lt;/span>&lt;span class="kr">_&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In many places you will see such implementation:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">instance&lt;/span> &lt;span class="kt">Monad&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="ow">-&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">where&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="nf">\&lt;/span>&lt;span class="kr">_&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">h&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="nf">\&lt;/span>&lt;span class="n">w&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="n">w&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">w&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>where the most confusing part is this &lt;code>((-&amp;gt;) r)&lt;/code>. This is type constructor which
is missing the argument - value it will take. With list monad we have:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">instance&lt;/span> &lt;span class="kt">Monad&lt;/span> &lt;span class="kt">[]&lt;/span> &lt;span class="kr">where&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">xs&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">concat&lt;/span> &lt;span class="o">$&lt;/span> &lt;span class="n">map&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="n">xs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>and &lt;code>[]&lt;/code> is a constructor that is also missing value. For example if we write &lt;code>[] Int&lt;/code>,
we give the type constructor &lt;code>[]&lt;/code> type &lt;code>Int&lt;/code> and the result is &lt;code>[Int]&lt;/code>. So we can say that
&lt;code>[]&lt;/code> is of &lt;em>kind&lt;/em> &lt;code>* -&amp;gt; *&lt;/code>, where &lt;code>*&lt;/code> is a type. Even more, &lt;code>(-&amp;gt;) r&lt;/code> is also a type
constructor of kind &lt;code>* -&amp;gt; *&lt;/code>. If we give it the type &lt;code>String&lt;/code> we get &lt;code>(-&amp;gt;) r String&lt;/code> which
can be also written as &lt;code>r -&amp;gt; String&lt;/code>. In the Haskell documentation, &lt;code>m = (-&amp;gt;) r&lt;/code>, so &lt;code>m&lt;/code>
is a monad type constructor. Therefore &lt;code>m a&lt;/code> expands to &lt;code>r -&amp;gt; a&lt;/code>.&lt;/p>
&lt;p>Useful exercises are writing &lt;code>functor&lt;/code> and &lt;code>applicative&lt;/code> instances for the monad function,
as well as &lt;code>ask&lt;/code> and &lt;code>local&lt;/code> functions (I explained what they do in the previous section).
These implementations are:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="kt">Monad&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="ow">=&amp;gt;&lt;/span> &lt;span class="kt">MonadReader&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="kr">where&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ask&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="c1">-- we now now that m r expands to r -&amp;gt; r, so only id fits&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ask&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">local&lt;/span> &lt;span class="ow">::&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="n">a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">local&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="n">previousReader&lt;/span> &lt;span class="n">env&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">previousReader&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="n">env&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And that is how we can play with MonadReader.&lt;/p></description></item></channel></rss>